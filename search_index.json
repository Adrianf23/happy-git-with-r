[
["index.html", "Happy Git and GitHub for the useR What’s going on here", " Happy Git and GitHub for the useR Jenny Bryan and the STAT 545 TAs 2016-06-20 What’s going on here THIS IS AN EXPERIMENT! Trying this, gradually: bring (and expand) the STAT 545 Git/GitHub content into bookdown format, in anticipation of the tutorial at useR! 2016: session in the useR! schedule full description on the main site slides for a related talk I’ve given a couple times landing page for most of the Git/Github stuff at stat545.com Happy Git and GitHub for the useR by Jennifer Bryan is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License. "],
["why-git-why-github.html", "1 Why Git? Why GitHub? 1.1 Why Git? 1.2 Why GitHub? 1.3 Is it going to hurt? 1.4 What is the payoff? 1.5 Who can do what? 1.6 Special features of GitHub 1.7 What’s special about using R and with Git and GitHub? 1.8 Audience and pre-reqs 1.9 What this is NOT", " 1 Why Git? Why GitHub? 1.1 Why Git? Git is a version control system. Its original purpose was to help groups of developers work collaboratively on big software projects. Git manages the evolution of a set of files – called a repository – in a sane, highly structured way. If you have no idea what I’m talking about, think of it as the “Track Changes” features from Microsoft Word on steroids. Git has been re-purposed by the data science community. In addition to using it for source code, we use it to manage the motley collection of files that make up typical data analytical projects, which often consist of data, figures, reports, and, yes, source code. A solo data analyst, working on a single computer, will benefit from adopting version control. But not nearly enough to justify the pain of installation and workflow upheaval. There are much easier ways ways to get versioned back ups of your files, if that’s all you’re worried about. In my opinion, for new users, the pros of Git only outweigh the cons when you factor in the overhead of communicating and collaborating with other people. Who among us does not need to do that? Your life is much easier if this is baked into your workflow, as opposed to being a separate process that you dread or neglect. 1.2 Why GitHub? This is where hosting services like GitHub, Bitbucket, and GitLab come in. They provide a home for your Git-based projects on the internet. If you have no idea what I’m talking about, think of it as DropBox but much, much better. The remote host acts as a distribution channel or clearinghouse for your Git-managed project. It allows other people to see your stuff, sync up with you, and perhaps even make changes. These hosting providers improve upon traditional Unix Git servers with well-designed web-based interfaces. We target GitHub – not Bitbucket or GitLab – for the sake of specificity. However, all the big-picture principles and even some mechanics will carry over to these alternative hosting platforms. Don’t get too caught up on public versus private at this point. There are many ways to get private repositories from the major providers for low or no cost. Just get started and figure out if and how Git/GitHub is going to work for you! If you outgrow this arrangement, you can throw some combination of technical savvy and money at the problem. You can either pay for a higher level of service or self-host one of these platforms. 1.3 Is it going to hurt? You have to install Git, get local Git talking to GitHub, and make sure RStudio can talk to local Git (and, therefore, GitHub). This is one-time or once-per-computer pain. For new or existing projects, you will: Dedicate a directory (a.k.a “folder”) to it. Make it an RStudio Project. Make it a Git repository. Go about your usual business. But instead of only saving individual files, periodically you make a commit, which takes a multi-file snapshot of the entire project. Have you ever versioned a file by adding your initials or the date? That is effectively a commit, albeit only for a single file: it is a version that is significant to you and that you might want to inspect or revert to later. Push commits to GitHub periodically. This is like sharing a document with colleagues on DropBox or sending it out as an email attachment. It signals you’re ready to make your work visible to others and invite comment or edits. This is a change to your normal, daily workflow. It feels weird at first but quickly becomes second nature. FWIW, STAT 545 students are required to submit all coursework via GitHub. This is a major topic in class and office hours for the first two weeks. Then we practically never discuss it again. The rest of this site is dedicated to walking you through the necessary setup and creating your first few Git projects. We conclude with prompts that guide you through some of the more advanced usage that makes all of this initial pain worthwhile. 1.4 What is the payoff? If someone needs to see your work or if you want them to try out your code, they can easily get it from GitHub. If they use Git, then can clone or fork your repository. If they don’t use Git, they can still browse your project on GitHub like a normal website and even grab everything by downloading a zip archive. If you need to collaborate on data analysis or code development, then all involved should use Git. Use GitHub as your clearinghouse: individuals work independently, then send work back to GitHub for reconciliation and transmission to the rest of the team. If you care deeply about someone else’s project, such as an R package you use heavily, you can track its development on GitHub. You can watch the repository to get notified of major activity. You can fork it to keep your own copy. You can modify your fork to add features or fix bugs and send them back to the owner as a proposed change. 1.5 Who can do what? A public repository is readable by the world. The owner can grant higher levels of permission to others, such as the ability to push commits. A private repository is invisible to the world. The owner can grant read, write (push), or admin access to others. 1.6 Special features of GitHub this is perhaps too detailed … full stop? or does it belong elsewhere? In addition to a well-designed user interface, GitHub offers two especially important features: Issues. Remember how we’re high-jacking software development tools? Well, this is the bug tracker. It’s a list of things … bugs, feature requests, to do’s, whatever. Issues are tightly integrated with email and therefore allow you to copy/embed important conversations in the associated repo. Issues can be assigned to people (e.g., to do’s) and tagged (“bug” or “progress-report”). Issues are tightly integrated with commits and therefore allow you to record that the changes in this commit solve that problem which was discussed in that issue. As a new user of GitHub, one of the most productive things you can do is to use GitHub issues to provide a clear bug report or feature request for a package you use. Pull requests. Git allows a project to have multiple, independent branches of development, with the notion that some should eventually be merged back into the main development branch. These are technical Git terms but hopefully also make sense on their own. A pull request is a formal proposal that says: “Here are some changes I would like to make.” It might be linked to a specific issue: “Related to #14.” or “Fixes #56”. GitHub facilitates and preserves the discussion of the proposal, holistically and line-by-line. 1.7 What’s special about using R and with Git and GitHub? the active R package development community on GitHub workflows for R scripts and R Markdown files that make it easy to share source and rendered results on GitHub Git- and GitHub-related features of the RStudio IDE 1.8 Audience and pre-reqs The target audience for this site is someone who analyzes data, probably with R, though much of the content may be useful to analysts using other languages. While R package development with Git(Hub) is absolutely in scope, it’s not an explicit focus or requirement. The site is aimed at intermediate to advanced R users, who are comfortable writing R scripts and managing R projects. You should have a good grasp of files and directories and be generally knowledgeable about where things live on your computer. Although we will show alternatives for most Git operations, we will inevitably spend some time in the shell and we assume some prior experience. For example, you should know how to open up a shell, navigate to a certain directory, and list the files there. You should be comfortable using shell commands to view/move/rename files and to work with your command history. 1.9 What this is NOT We aim to teach novices about Git on a strict “need to know” basis. Git was built to manage development of the Linux kernel, which is probably very different from what you do. Most people need a small subset of Git’s functionality and that will be our focus. If you want a full-blown exposition of Git as a directed acyclic graph or a treatise on the Git-Flow branching strategy, you will be sad. "],
["contrib.html", "2 Contributors", " 2 Contributors Jenny Bryan (twitter, GitHub) is a professor at the University of British Columbia. She’s been using and teaching R (or S!) for 20 years, most recently in STAT 545 and Software Carpentry. Other aspects of her R life include work with rOpenSci, development of the googlesheets and gapminder packages, and being academic director for UBC’s Master of Data Science. The development and delivery of this material has benefited greatly from contributions by: Dean Attali (blog, GitHub, twitter) who recently earned his M.Sc. Bioinformatics at UBC. He’s the developer of the shinyjs package and much more. Bernhard Konrad (GitHub, twitter) recently earned his Ph.D. in Applied Math at UBC, completed an Insight Data Science Fellowship, and is a software engineer at Google. Shaun Jackman (GitHub, twitter, sjackman.ca) is a Ph.D. in bioinformatics at UBC, the lead developer of Linuxbrew and a developer of Homebrew-Science and the genome sequence assembly software ABySS The STAT 545 TA group "],
["workshops.html", "3 Workshops 3.1 useR! 2016 Stanford 3.2 CSAMA 2016: Statistical Data Analysis for Genome Biology", " 3 Workshops These materials can be used for independent study, but I also use them to support in-person workshops (see below) STAT 545 at UBC UBC Master of Data Science 3.1 useR! 2016 Stanford 3.1.1 Logistics Monday, June 27, 2016 9:00am - 12:00pm, with coffee break 10:15am - 10:30am Campbell Rehearsal Hall 541 Lasuen Mall, Stanford, CA 94305 Google Maps Sessions in the useR! schedule website: part 1, part 2 Full description on the main useR! website 3.1.2 Pre-tutorial set-up It is vital that you attempt to get your system set up in advance. These are battle-tested instructions, so most will succeed. We believe in you! If you have trouble, you can open an issue here and we might be able to help in the days leading up to useR! (no promises). We will have TAs at the workshop starting at 8:15am. insert list of specific pages of set up here!!! 3.1.3 What we will do The tutorial is structured as ~5 task-oriented units. Indicative topics: The most difficult part: installation and configuration! Creating a Git repository and connecting the local repo to a GitHub remote, for new and existing projects. The intersection of GitHub and the R world: R packages developed on Github and how to make use of “issues”; METACRAN read-only mirror of all of CRAN; R-specific searching tips. How to propose a change or fix to someone else’s project, i.e. “make a pull request”. Daily workflows and FAQ: how often should I commit?, which files should I commit? how do I change a commit or its message? how do groups of 1, 5, or 10 people structure their work with Git(Hub)? etc. 3.2 CSAMA 2016: Statistical Data Analysis for Genome Biology 3.2.1 Logistics http://www.huber.embl.de/csama2016/ July 10 - 15, 2016, Bressanone-Brixen, Italy Monday July 11, Lab 2, 15:30 - 17:00 Reproducible research and R authoring with markdown and knitr Thursday July 14, Lab 4, 14:00 - 15:30 Use of Git and GitHub with R, RStudio, and R Markdown "],
["installation-pain.html", "4 Installation pain 4.1 Success and operating systems", " 4 Installation pain Getting all the necessary software installed, configured, and playing nicely together is honestly half the battle here. Brace yourself for some pain. The upside is that you can give yourself a pat on the back once you get through this. And you WILL get through this. You will find far more resources for how to use Git than for installation and configuration. Why? The experts … Have been doing this for years. It’s simply not hard for them anymore. Probably use some flavor of Unix. They may secretly (or not so secretly) take pride in neither using nor knowing Windows. Get more satisfaction and reward for thinking and writing about Git concepts and workflows than Git installation. In their defense, it’s hard to write installation instructions. Failures can be specific to an individual OS or even individual computer. If you have some new problem and, especially, the corresponding solution, we’d love to hear from you! 4.1 Success and operating systems #success-and-operating-systems table { width: auto; } Our installation instructions have been forged in the fires of STAT 545, STAT 540, and assorted workshops, over several years. We regularly hear from grateful souls on the internet who also have success. Here’s some recent data on the subset of STAT 545 students for which we recorded the operating system: half Mac, just under half Windows (various flavours), and a dash of Linux. 2014 2015 Mac 16 (41%) 38 (52%) Windows 7 9 (23%) 13 (18%) Windows 8 12 (31%) 9 (12%) Windows 10 0 (0%) 8 (11%) Linux 2 (5%) 5 (7%) "],
["github-acct.html", "5 Register a GitHub account 5.1 Username advice 5.2 Free private repos 5.3 Pay for private repos", " 5 Register a GitHub account Register an account with GitHub. It’s free! https://github.com 5.1 Username advice You will be able upgrade to a paid level of service, apply discounts, join organizations, etc. in the future, so don’t worry about any of that now. Except your username. You might want to give that some thought A few tips, which sadly tend to contradict each other: Incorporate your actual name! People like to know who they’re dealing with. Also makes your username easier for people to guess or remember. Reuse your username from other contexts, e.g., Twitter or Slack. But, of course, someone with no GitHub activity will probably be squatting on that. Pick a username you will be comfortable revealing to your future boss. Shorter is better than longer. Be as unique as possible in as few characters as possible. In some settings GitHub auto-completes or suggests usernames. Make it timeless. Don’t highlight your current university, employer, or place of residence. Avoid words laden with special meaning in programming. In my first inept efforts to script around the GitHub API, I assigned lots of issues to the guy with username NA because my vector of GitHub usernames contained missing values. A variant of Little Bobby Tables. You can change your username later, but better to get this right the first time. https://help.github.com/articles/changing-your-github-username/ https://help.github.com/articles/what-happens-when-i-change-my-username/ 5.2 Free private repos GitHub offers free unlimited private repositories for users and organizations in education, academic research, nonprofits, and charities. Go ahead and register your free acount NOW and then pursue any special offer that applies to you: Students, faculty, and educational/research staff: GitHub Education. GitHub “Organizations” can be extremely useful for courses or research/lab groups, where you need some coordination across a set of repos and users. Official nonprofit organizations and charities: GitHub for Good 5.3 Pay for private repos Everyone else can pay for some private repos. A personal plan with unlimited private repos is $7 / month at the time of writing. See the current plans and pricing here: https://github.com/pricing "],
["install-r-rstudio.html", "6 Install or upgrade R and RStudio 6.1 More about R and RStudio", " 6 Install or upgrade R and RStudio Install pre-compiled binary of R for your OS: https://cloud.r-project.org Install Preview version RStudio Desktop: https://www.rstudio.com/products/rstudio/download/preview/ Update your R packages: update.packages(ask = FALSE, checkBuilt = TRUE) Read on for more detail or hand-holding. 6.1 More about R and RStudio Get current, people. You don’t want to adopt new things on day one. But at some point, running old versions of software adds unnecessary difficulty. In live workshops, there is a limit to how much we can help with ancient versions of R or RStudio. Also, frankly, there is a limit to our motivation. By definition, these problems are going away and we’d rather focus on edge cases with current versions, which affect lots of people. For now, just go here: http://stat545.com/block000_r-rstudio-install.html not sure whether to move or duplicate that content "],
["install-git.html", "7 Install Git 7.1 Git already installed? 7.2 Windows 7.3 Mac OS 7.4 Linux", " 7 Install Git You need Git, so you can use it at the command line and so RStudio can call it. If there’s any chance it’s installed already, verify that, rejoice, and skip this step. Otherwise, find installation instructions below for your operating system. 7.1 Git already installed? Go to the shell and enter which git and/or git --version: jenny@2015-mbp happy-git-with-r $ which git /usr/bin/git jenny@2015-mbp happy-git-with-r $ git --version git version 2.7.4 (Apple Git-66) If Git reports a path to an executable and a version, that’s great! You have Git already. No need to install! Move on. If, instead, you see something more like git: command not found, keep reading. Mac OS users might get an immediate offer to install command developer tools. Yes, you should accept! Click “Install” and read more below. 7.2 Windows Option 1 (recommended): Install Git for Windows, previously known as msysgit or “Git Bash”, to get Git in addition to some other useful tools, such as the Bash shell. Yes, all those names are totally confusing. This approach leaves the Git executable in a conventional location, which will help you and other programs, e.g. RStudio, find it and use it. This also supports a transition to more expert use, because the Bash shell will be useful as you venture outside of R/RStudio. This also leaves you with a Git client, though not a very good one. So check out Git clients we recommend (insert link). Option 2 (NOT recommended): The GitHub hosting site offers GitHub Desktop for Windows that provides Git itself, a client, and smooth integration with GitHub. Their Windows set-up instructions recommend this method of Git installation. Why don’t we like it? We’ve seen GitHub Desktop for Windows lead to Git installation in suboptimal locations, such as ~/AppData/Local, and in other places we could never find. If you were only going to interact with GitHub via this app, maybe that’s OK, but that does not apply to you. Therefore, we recommend option 1 instead. 7.3 Mac OS Option 1 (highly recommended): Install the Xcode command line tools (not all of Xcode), which includes Git. Go to the shell and enter one of these commands to elicit an offer to install developer command line tools: git --version git config Another way to request this is via xcode-select --install. We just happen to find this Git-based trigger apropos. Option 2 (recommended): Install Git from here: http://git-scm.com/downloads. This arguably sets you up the best for the future. It will certainly get you the latest version of Git of all approaches described here. The GitHub home for this project is here: https://github.com/timcharper/git_osx_installer. At that link, there is a list of maintained builds for various combinations of Git and Mac OS version. If you’re running 10.7 Lion and struggling, we’ve had success in September 2015 with binaries found here: https://www.wandisco.com/git/download. Option 3 (recommended): If you anticipate getting heavily into scientific computing, you’re going to be installing and updating lots of software. You should check out homebrew, “the missing package manager for OS X”. Among many other things, it can install Git for you. Once you have Homebrew installed, do this in the shell: brew install git Option 4 (NOT recommended): The GitHub hosting site offers GitHub Desktop for Mac that provides the option to install Git itself, a client, and smooth integration with GitHub.. Their Mac set-up instructions recommend this method of Git installation. We don’t like GitHub Desktop as a Git client, so this is a very cumbersome way to install Git. Consider this option a last resort. 7.4 Linux Install Git via your distro’s package manager. Ubuntu or Debian Linux: sudo apt-get install git Fedora or RedHat Linux: sudo yum install git A comprehensive list for various Linux and Unix package managers: https://git-scm.com/download/linux "],
["hello-git.html", "8 Introduce yourself to Git 8.1 More about git config", " 8 Introduce yourself to Git In the shell: git config --global user.name &#39;Jennifer Bryan&#39; git config --global user.email &#39;jenny@stat.ubc.ca&#39; git config --global --list substituting your name and the email associated with your GitHub account. 8.1 More about git config From RStudio, go to Tools &gt; Shell and tell git your name and GitHub email by typing (use your own name and email): git config --global user.name 'Jennifer Bryan' This does NOT have to be your GitHub username, although it can be. Another good option is your actual first name and last name. Your commits will be labelled with this name, so this should be informative to potential collaborators. git config --global user.email 'jenny@stat.ubc.ca' This must be the email that you used to sign up for GitHub. These commands return nothing. You can check that git understood what you typed by looking at the output of git config --global --list. Resources: GitHub’s advice. Quick primer on the shell "],
["git-client.html", "9 Install a Git client 9.1 What and why 9.2 Recommended Git clients", " 9 Install a Git client This is optional but highly recommended. Unless specified, it is not required for live workshops and will not be explicitly taught, though you might see us using one of these clients. 9.1 What and why Learning to use version control can be rough at first. I found the use of a GUI – as opposed to the command line – extremely helpful when I was getting started. I call this sort of helper application a Git client. It’s really a Git(Hub) client because they also help you interact with GitHub or other remotes. Git and your Git client are not the same thing, just like R and RStudio are not the same thing. A Git client and the RStudio IDE are not necessary to use to Git or R, respectively, but they make the experience more pleasant because they reduce the amount of command line bullshittery. RStudio offers a very basic Git client. I use this often for simple operations, but you probably want another, more powerful one as well. Fair warning: for some things, you will have to use the command line. But the more powerful your Git client is, the less often this happens. Fantastic news: because all of the clients are just forming and executing Git commands on your behalf, you don’t have to pick one. You can literally do one operation from the command line, do another from RStudio, and another from SourceTree, one after the other, and it just works. Very rarely, both clients will scan the repo at the same time and you’ll get an error message about .git/index.lock. Try the operation again at least once before doing any further troubleshooting. 9.2 Recommended Git clients SourceTree is a free, powerful Git(Hub) client that I highly recommend. It was my first Git client and is still my favorite for nontrivial Git tasks. Available for Mac and Windows. If I’m teaching you in a course or workshop, you might see me using this. GitKraken is quite new on the scene and is free. I would probably start here if I was starting today. Why? Because it works across all three OSes my students use: Windows, Mac, and Linux. I hear very good reviews, especially from long-suffering Linux users who haven’t had any great options until now. GitUp is a free, open source client for Mac OS. I’ve heard really good things about it and like what I read on the website. However, I tried to make myself use it for a day and went sort of nuts, possibly because I’m so used to SourceTree. YMMV. GitHub also offers a free Git(Hub) client for Windows and Mac. We do NOT recommend it for Windows and have serious reservations even for Mac OS. What do we object to? The degree of hand-holding offered by GitHub’s clients borders on hand-cuffs. The Windows client sometimes leaves the Git executable so well hidden that we can’t find it. This is a deal-killer, because that means RStudio can’t find it either. These clients wrap Git functionality so thoroughly that we’ve had students make some destructive mistakes. For example, we’ve seen a “sync” operation that resulted in the loss of local uncommitted changes. Exactly which Git operations, in what order, are implied by “sync”, is not entirely clear. We prefer clients that expose Git more explicitly. We’ve heard similar negative reviews from other instructors. It’s not just us. Others that I have heard positive reviews for: SmartGit git-cola magit, for Emacs nerds Browse even more Git(Hub) clients. "],
["push-pull-github.html", "10 Connect to GitHub 10.1 Make a repo on GitHub 10.2 Clone the repo to your local computer 10.3 Make a local change, commit, and push 10.4 Confirm the local change propagated to the GitHub remote 10.5 Am I really going to type GitHub username and password on each push? 10.6 Clean up", " 10 Connect to GitHub Objective: make sure that you can pull from and push to GitHub from your computer. I do not explain all the shell and Git commands in detail. This is a black box diagnostic / configuration exercise. In later chapters and in live workshops, we revisit these operations with much more narrative. 10.1 Make a repo on GitHub Go to https://github.com and make sure you are logged in. Click green “New repository” button. Or, if you are on your own profile page, click on “Repositories”, then click the green “New” button. Repository name: myrepo (or whatever you wish, we will delete this) Public YES Initialize this repository with a README Click big green button “Create repository.” Copy the HTTPS clone URL to your clipboard via the green “Clone or Download” button. 10.2 Clone the repo to your local computer Go to the shell. Take charge of – or at least notice! – what directory you’re in. pwd to display working directory. cd to move around. Personally, I would do this sort of thing in ~/tmp. Clone myrepo from GitHub to your computer. This URL should have your GitHub username and the name of your practice repo. If your shell cooperates, you should be able to paste the whole https://.... bit that we copied above. But some shells are not (immediately) clipboard aware. In that sad case, you must type it. Accurately. git clone https://github.com/YOUR-USERNAME/YOUR-REPOSITORY.git This should look something like this: jenny@2015-mbp tmp $ git clone https://github.com/jennybc/myrepo.git Cloning into &#39;myrepo&#39;... remote: Counting objects: 3, done. remote: Total 3 (delta 0), reused 0 (delta 0), pack-reused 0 Unpacking objects: 100% (3/3), done. Checking connectivity... done. Make this new repo your working directory, list its files, display the README, and get some information on its connection to GitHub: cd myrepo ls less README.md git remote show origin This should look something like this: jenny@2015-mbp ~ $ cd myrepo jenny@2015-mbp myrepo $ ls README.md jenny@2015-mbp myrepo $ less README.md # myrepo tutorial development jenny@2015-mbp myrepo $ git remote show origin * remote origin Fetch URL: https://github.com/jennybc/myrepo.git Push URL: https://github.com/jennybc/myrepo.git HEAD branch: master Remote branch: master tracked Local branch configured for &#39;git pull&#39;: master merges with remote master Local ref configured for &#39;git push&#39;: master pushes to master (up to date) 10.3 Make a local change, commit, and push Add a line to README and verify that Git notices the change: echo &quot;A line I wrote on my local computer&quot; &gt;&gt; README.md git status This should look something like this: jenny@2015-mbp myrepo $ echo &quot;A line I wrote on my local computer&quot; &gt;&gt; README.md jenny@2015-mbp myrepo $ git status On branch master Your branch is up-to-date with &#39;origin/master&#39;. Changes not staged for commit: (use &quot;git add &lt;file&gt;...&quot; to update what will be committed) (use &quot;git checkout -- &lt;file&gt;...&quot; to discard changes in working directory) modified: README.md no changes added to commit (use &quot;git add&quot; and/or &quot;git commit -a&quot;) Commit this change and push to your remote repo on GitHub. If you’re a new GitHub user, you will be challenged for your GitHub username and password. Provide them! git add -A git commit -m &quot;A commit from my local computer&quot; git push This should look something like this: jenny@2015-mbp myrepo $ git add -A jenny@2015-mbp myrepo $ git commit -m &quot;A commit from my local computer&quot; [master de669ba] A commit from my local computer 1 file changed, 1 insertion(+) jenny@2015-mbp myrepo $ git push Counting objects: 3, done. Delta compression using up to 8 threads. Compressing objects: 100% (2/2), done. Writing objects: 100% (3/3), 311 bytes | 0 bytes/s, done. Total 3 (delta 0), reused 0 (delta 0) To https://github.com/jennybc/myrepo.git b4112c5..de669ba master -&gt; master 10.4 Confirm the local change propagated to the GitHub remote Go back to the browser. I assume we’re still viewing your new GitHub repo. Refresh. You should see the new “A line I wrote on my local computer” in the README. If you click on “commits,” you should see one with the message “A commit from my local computer.” If you have made it this far, you are ready to graduate to using Git and GitHub with RStudio (add link). But first … 10.5 Am I really going to type GitHub username and password on each push? It is likely that your first push, above, leads to a challenge for your GitHub username and password. This will drive you crazy in the long-run and make you reluctant to push. Do one of the follow to eliminate this annoyance: Credential caching for HTTPS access (add link) Set up SSH keys (add link) Now is the perfect time to do this, since you have a functioning test repo. 10.6 Clean up When you’re ready to clean up, delete the local repo in the shell: cd .. rm -rf myrepo/ In the browser, viewing your repo’s landing page on GitHub, click on “Settings”, near the bottom or the right sidebar. Scroll down, click on “delete repository,” and do as it asks. "],
["credential-caching.html", "11 Cache credentials for HTTPS 11.1 Get a test repository 11.2 Verify that your Git is new enough to have a credential helper 11.3 Turn on the credential helper", " 11 Cache credentials for HTTPS If you plan to push/pull using HTTPS, you want Git to cache your credentials (username, password), so you don’t need to enter them over and over again. I do not explain all the shell and Git commands in detail. This is a black box diagnostic / configuration exercise. 11.1 Get a test repository You need a functioning test Git repository. One that exists locally and remotely on GitHub, with the local repo tracking the remote. If you have just verified that you can interact with GitHub (add link) from your local computer, that test repo will be perfect. If you have just verified that you can work with GitHub from RStudio (add link), that test repo will also be perfect. You may proceed when You have a test repo. You know where it lives on your local computer. Example: /home/jenny/tmp/myrepo You know where it lives on GitHub. Example: https://github.com/jennybc/myrepo You know local is tracking remote. In a shell with working directory set to the local Git repo, enter: git remote -v Output like confirms that fetch and push are set to remote URLs that point to your GitHub repo: origin https://github.com/jennybc/myrepo (fetch) origin https://github.com/jennybc/myrepo (push) Now enter: git branch -vv Here we confirm that the local master branch has your GitHub master branch (origin/master) as upstream remote. Gibberish? Just check that your output looks similar to mine: master b8e03e3 [origin/master] line added locally 11.2 Verify that your Git is new enough to have a credential helper In a shell, do: git --version and verify your version is 1.7.10 or newer. If not, update Git (add link) or use SSH keys (add link). 11.3 Turn on the credential helper 11.3.0.1 Windows In the shell, enter: git config --global credential.helper wincred 11.3.0.2 Windows, plan B If that doesn’t seem to work, install an external credential helper. Download the git-credential-winstore.exe application. Run it! It should work if Git is in your PATH environment variable. If not, go to the directory where you downloaded the application and run the following: git-credential-winstore -i &quot;C:\\Program Files (x86)\\Git\\bin\\git.exe&quot; 11.3.0.3 Mac Find out if the credential helper is already installed. In the shell, enter: git credential-osxkeychain And look for this output: usage: git credential-osxkeychain &lt;get|store|erase&gt; If you don’t get this output, follow steps 2 and 3 on the github help. Once you’ve confirmed you have the credential helper, enter: git config --global credential.helper osxkeychain 11.3.0.4 Linux In the shell, enter: git config --global credential.helper &#39;cache --timeout=10000000&#39; to store your password for ten million seconds or around 16 weeks, enough for a semester. 11.3.1 Trigger a username / password challenge Change a file in your local repo and commit it. Do that however you wish. Here are shell commands that will work: echo &quot;adding a line&quot; &gt;&gt; README.md git add -A git commit -m &quot;A commit from my local computer&quot; Now push! git push -u origin master One last time you will be asked for your username and password, which hopefully will be cached. Now push AGAIN. git push You should NOT be asked for your username and password, instead you should see Everything up-to-date. Rejoice and close the shell. "],
["ssh-keys.html", "12 Set up keys for SSH", " 12 Set up keys for SSH Anmol6 to PR from MDS setup. In the meantime, there are good instructions here at the end of the section on initial set up: http://r-pkgs.had.co.nz/git.html#git-init "],
["connect-rstudio-to-git-and-github.html", "13 Connect RStudio to Git and GitHub 13.1 Prerequisites 13.2 Step 1: Make a new repo on GitHub 13.3 Step 2: Clone the new GitHub repository to your computer via RStudio 13.4 Step 2 plan B: Connect a local RStudio project to a GitHub repo 13.5 Step 3: Make local changes, save, commit 13.6 Step 4: Push your local changes online to GitHub 13.7 The end 13.8 What if this doesn’t work?", " 13 Connect RStudio to Git and GitHub This is the big moment where we verify that RStudio can issue Git commands on your behalf. Assuming that you’ve gotten local Git to talk to GitHub, this means you’ll also be able to pull from and push to GitHub from RStudio. 13.1 Prerequisites We assume the following: You’ve registered a free GitHub account (chapter 5). You’ve installed/updated R and RStudio (chapter 6). You’ve installed Git (chapter 7). You’ve introduced yourself to Git (chapter 8). You’ve confirmed that you can push to / pull from GitHub from the command line (chapter 10). You’ve cached your credentials or set up SSH keys, so you don’t need to authenticate yourself to GitHub interactively optional but highly recommended (chapters 11 and 12). 13.2 Step 1: Make a new repo on GitHub Do this once per new project. Go to https://github.com and make sure you are logged in. Click green “New repository” button. Or, if you are on your own profile page, click on “Repositories”, then click the green “New” button. Repository name: myrepo (or whatever you wish, we will delete this) Public YES Initialize this repository with a README Click big green button “Create repository.” Copy the HTTPS clone URL to your clipboard via the green “Clone or Download” button. Or copy the SSH URL if you chose to set up SSH keys. 13.3 Step 2: Clone the new GitHub repository to your computer via RStudio In RStudio, start a new Project: File &gt; New Project &gt; Version Control &gt; Git. In the “repository URL” paste the URL of your new GitHub repository. It will be something like this https://github.com/jennybc/myrepo.git. Do you NOT see an option to get the Project from Version Control? Go to chapter 14 for tips on how to help RStudio find Git. Take charge of – or at least notice! – the local directory for the Project. A common rookie mistake is to have no idea where you are saving files or what your working directory is. Pay attention. Be intentional. Personally, I would do this in ~/tmp. I suggest you check “Open in new session”, as that’s what you’ll usually do in real life. Click “Create Project” to create a new directory, which will be all of these things: a directory or “folder” on your computer a Git repository, linked to a remote GitHub repository an RStudio Project In the absence of other constraints, I suggest that all of your R projects have exactly this set-up. This should download the README.md file that we created on GitHub in the previous step. Look in RStudio’s file browser pane for the README.md file. There’s a big advantage to the “Github first, then RStudio” workflow: the remote GitHub repo is now the “upstream” remote for your local repo. This is a technical but important point about Git. The practical implication is that you are now set up to push and pull. No need to fanny around setting up Git remotes on the command line or in another Git client. 13.4 Step 2 plan B: Connect a local RStudio project to a GitHub repo This workflow is the reverse of the above and cannot be executed from within R/RStudio. But sometimes it’s necessary. Create a new RStudio project: File &gt; New Project &gt; New Directory &gt; Empty Project. Directory name: myrepo (or whatever you named the GitHub repo) Take charge of – or at least notice! – the local directory where this Project will live. YES check “Create a git repository”. Do you NOT see an option to get the Project from Version Control? Go to chapter 14 for tips on how to help RStudio find Git. I suggest you check “Open in new session”, as that’s what you’ll usually do in real life. Click “Create Project” to create a new directory, which will be all of these things: a directory or “folder” on your computer a Git repository, linked to a remote GitHub repository no, tragically this is not yet true … we deal with that next an RStudio Project In the absence of other constraints, I suggest that all of your R projects have exactly this set-up. Initiate the “upstream” or “tracking” relationship by adding a remote. Go to Tools &gt; shell and do this, substituting the HTTPS or SSH URL for your GitHub repo, according to your setup: git remote add origin https://github.com/jennybc/myrepo.git Download all the files from the online GitHub repository (possibly just README.md, at this point). git pull origin master Cement the tracking relationship between your GitHub repository and the local repo by pushing and setting the “upstream” remote: git push -u origin master It is possible you will be challenged for username and password here, but that means you should read up on caching your credentials (chapter 11) or settting up SSH keys (chapter 12) so this stops happening. 13.5 Step 3: Make local changes, save, commit Do this every time you finish a valuable chunk of work, probably many times a day. From RStudio, modify the README.md file, e.g., by adding the line “This is a line from RStudio”. Save your changes. Commit these changes to your local repo. How? From RStudio: Click the “Git” tab in upper right pane Check “Staged” box for any files whose existence or modifications you want to commit. To see more detail on what’s changed in file since the last commit, click on “Diff” for a Git pop-up If you’re not already in the Git pop-up, click “Commit” Type a message in “Commit message” Click “Commit” 13.6 Step 4: Push your local changes online to GitHub Do this a few times a day, but possibly less often than you commit. You have new work in your local Git repository, but the changes are not online yet. This will seem counterintuitive, but first let’s stop and pull from GitHub. Why? Establish this habit for the future! If you make changes to the repo in the browser or from another machine or (one day) a collaborator has pushed, you will be happier if you pull those changes in before you attempt to push. Click the blue “Pull” button in the “Git” tab in RStudio. I doubt anything will happen, i.e. you’ll get the message “Already up-to-date.” This is just to establish a habit. Click the green “Push” button to send your local changes to GitHub. You should see some message along these lines. [master dc671f0] blah 3 files changed, 22 insertions(+) create mode 100644 .gitignore create mode 100644 myrepo.Rproj 13.7 The end Now just … repeat. Do work somewhere. Commit it. Push it or pull it depending on where you did it, but get local and remote “synced up”. Repeat. 13.8 What if this doesn’t work? Some people, at least under the severe time pressure of a live workshop, may not have success using Git and GitHub from RStudio. This is rare but happens and we can generally sort this out later. In the meantime, you can make commits and pulls/pushes using Git commands in the shell or with one of the other Git clients recommended in chapter 9. The use of Git and GitHub from within RStudio is just a convenience, but one worth exploiting. "],
["rstudio-see-git.html", "14 Detect Git from RStudio 14.1 Do you have a problem? 14.2 Find Git yourself 14.3 Tell RStudio where to find Git", " 14 Detect Git from RStudio If you want RStudio to help with your Git and GitHub work, it must be able to find the Git executable. This often “just works”, so this page is aimed at people who have reason to suspect they have a problem. This is something you set up once-per-computer. 14.1 Do you have a problem? Let’s check if RStudio can find the Git executable. File &gt; New Project… Do you see an option to create from Version Control? If yes, good. Select New Directory &gt; Empty Project. Do you see a checkbox “Create a git repository”? If yes, good, CHECK IT. Give this disposable test project a name and click Create Project. Do you see a “Git” tab in the upper right pane, the same one that has “Environment” and “History”? If yes, good. If all looks good, you can delete this project. Looks like RStudio and Git are talking to each other. Keep reading if things don’t go so well or you want to know more. 14.2 Find Git yourself RStudio can only act as a GUI front-end for Git if Git has been successfully installed (chapter 7) AND RStudio can find it. A basic test for successful installation of Git is to simply enter git in the shell. If you get a complaint about Git not being found, it means installation was unsuccessful or that it is not being found, i.e. it is not on your PATH. If you are not sure where the Bit executable lives, try this in a shell: which git (Mac, Linux) where git (most versions of Windows) 14.3 Tell RStudio where to find Git If Git appears to be installed and findable, launch RStudio. Quit and re-launch RStudio if there’s any doubt in your mind about whether you opened RStudio before or after installing Git. Don’t make me stop this car and restart RStudio for you in office hours. DO IT. From RStudio, go to Tools &gt; Global Options &gt; Git/SVN and make sure that the box Git executable points to … the Git executable. It should read something like: /usr/bin/git (Mac, Linux) C:/Program Files (x86)/Git/bin/git.exe (Windows) Here is a screenshot of someone doing this on a Windows machine. WARNING: On Windows, do NOT use C:/Program Files (x86)/Git/cmd/git.exe. bin is GOOD YES! cmd is BAD NO! At times, we’ve had trouble navigating to the necessary directory on Mac OS, once we’ve clicked “Browse” and are working with a Finder-type window. The keyboard shortcut “command + shift + g” will summon “Go To Folder”, where you will be able type or paste any path you want. Restart RStudio if you make any changes. Don’t make me stop this car again and restart RStudio for you in office hours. DO IT. Do the steps at the top of the page to see if RStudio and git are communicating now. No joy? I’ve seen this help: With your Project open, go to Tools &gt; Project Options.... If available, click on “Git/SVN” and select “Git” in the Version control system dropdown menu. Answer “yes” to the “Confirm New Git Repository” pop up. Answer “yes” to the “Confirm Restart RStudio” pop up. If you installed Git via GitHub for Windows, it is possible the Git executable is really well hidden. Get our help or install Git another way. Your PATH is probably not set up correctly and/or you should re-install Git and control/notice where it’s going. Read more in 15. Get our help. "],
["troubleshooting.html", "15 RStudio, Git, GitHub Hell 15.1 I think I have installed Git but damn if I can find it 15.2 Dysfunctional PATH 15.3 Push/Pull buttons greyed out in RStudio 15.4 I have no idea if my local repo and my remote repo are connected. 15.5 Push fail at the RStudio level 15.6 Push rejected, i.e. fail at the Git/GitHub level 15.7 RStudio is not making certain files available for staging/commiting 15.8 I hear you have some Git repo inside your Git repo", " 15 RStudio, Git, GitHub Hell Problems we have seen and possible solutions. If you experience some new problem and, especially, find the corresponding solution, we’d love to hear from you! 15.1 I think I have installed Git but damn if I can find it When you install Git, try to control or record where it is being installed! Make a mental or physical note of these things. You may be able to find Git after the fact with these commands in the shell: which git (Mac, Linux, or anything running a bash shell) where git (Windows, when not in a bash shell) It is not entirely crazy to just re-install Git, using a method that leaves it in a more conventional location, and to pay very close attention to where it’s being installed. Live and learn. 15.2 Dysfunctional PATH I’m pretty sure that most cases of RStudio not automatically detecting the Git executable stem from problems with PATH. This is the set of directories where your computer will look for executables, such as Git (today) or make (later in this course). Certain methods of Git installation, especially on Windows and/or older OSes, have a higher tendency to put Git in an unconventional location or to fail to add the relevant directory to PATH. How to see your PATH? In the shell: echo $PATH Take a good hard look at this. See the point above about finding your Git executable or re-installing it while you are wide awake. Is the host directory in your PATH? No? Fix that. Go here for instructions on what to put in your .bash_profile in order to add a directory to PATH. 15.3 Push/Pull buttons greyed out in RStudio Are you sure your local repository is tracking a remote repository, e.g. a GitHub repo? In a shell with working directory set to the local Git repo, enter these commands: jenny@2015-mbp myrepo $ git remote -v origin https://github.com/jennybc/myrepo (fetch) origin https://github.com/jennybc/myrepo (push) jenny@2015-mbp myrepo $ git branch -vv * master b8e03e3 [origin/master] line added locally We want to see that fetch and push are set to remote URLs that point to the remote repo. We also want to see that your local master branch has your GitHub master branch as upstream remote. If you discover you still need to set a remote, go to the shell and get into the working directory of the RStudio Project and Git repo of interest. Initiate the “upstream” or “tracking” relationship by adding a remote. Substitute the HTTPS URL for your GitHub repo. git remote add origin https://github.com/jennybc/myrepo.git Download all the files from the online GitHub repository and deal with any conflicts. git pull origin master Cement the tracking relationship between your GitHub repository and the local repo by pushing and setting the “upstream” remote: git push -u origin master 15.4 I have no idea if my local repo and my remote repo are connected. See the above section on “Push/Pull buttons greyed out in RStudio.” 15.5 Push fail at the RStudio level Do you get this error in RStudio? error: unable to read askpass response from &#39;rpostback-askpass&#39; Open the shell: Tools &gt; Shell. git push -u origin master 15.6 Push rejected, i.e. fail at the Git/GitHub level You might have changes on the remote AND on your local repo. Just because you don’t remember making any edits in the browser doesn’t mean you didn’t. Humor me. Pull first. Resolve any conflicts. Then try your push again. 15.7 RStudio is not making certain files available for staging/commiting Do you have a space in your directory or file names? A space in a file name is a space in your soul. Get rid of it. Is your Git repo / RStudio Project inside a folder that … eventually rolls up to Google Drive, DropBox, Microsoft OneDrive, or a network drive? If yes, I recommend you move the repo / Project into a plain old directory that lives directly on your computer and that is not managed by, e.g., Google Drive. If you cannot deal with the two root causes identified above, then it is possible that a more powerful Git client (chapter 9) will be able to cope with these situations. But I make no promises. You should also try Git operations from the command line. 15.8 I hear you have some Git repo inside your Git repo Do not create a Git repository inside another Git repository. Just don’t. If you have a genuine need for this, which is really rare, the proper way to do is is via submodules. In STAT 545, we certainly do not need to do this and when we’ve seen it, it’s been a mistake. This has resulted in the unexpected and complete loss of the inner Git repository. To be sure, there was more going on here (cough, GitHub Desktop client), but non-standard usage of Git repos makes it much easier to make costly mistakes. "],
["more-content.html", "16 More content", " 16 More content more stuff coming soon … really!! "],
["references.html", "17 References", " 17 References "]
]
